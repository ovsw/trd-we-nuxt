@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply font-body bg-dark text-light text-xl;
  }
}

@layer components {
  .footerColumn {
    @apply flex flex-col flex-1 px-20 py-10 lg:py-20 space-y-6;
  }
  .footerColumn div:last-child {
    margin-top: auto !important;
  }
  .socialLink {
  }
  .socialLink img {
    @apply w-10 h-10;
  }

  /*  headings */
  .heading1 {
    @apply text-6xl lg:text-7xl text-light-light;
  }
  .heading2 {
    @apply text-5xl lg:text-6xl text-light-light;
  }
  .heading3 {
    @apply text-4xl lg:text-5xl text-light-light;
  }
  .heading1 strong,
  .heading2 strong,
  .heading3 strong {
    @apply font-black;
  }
  .heading2 strong,
  .heading3 strong {
    @apply text-b-orange;
  }
  /* sections */
  .section {
    @apply my-24 md:my-32 xl:my-52;
  }
  /* footer */
  .footerHeader {
    @apply uppercase tracking-widest text-base font-semibold;
  }
  /* layout */
  .auto-grid {
    display: grid;
    grid-template-columns: repeat(
      auto-fill,
      minmax(var(--auto-grid-min-size, 16rem), 1fr)
    );
    grid-gap: var(--auto-grid-gap, 1rem);
  }
}

@layer utilities {
  .page-bg-gradient {
    background: get-color("dark-shade");
    background-color: #7f5a83;
    background-image: radial-gradient(
      circle,
      rgba(10, 22, 21, 1) 0%,
      rgba(41, 4, 0, 1) 18%,
      rgba(36, 0, 50, 1) 35%,
      rgba(10, 22, 21, 1) 100%
    );
    background-position: bottom right;
    background-size: 200vw 200vh;
    background-attachment: fixed;
  }
  .blurc {
    background: rgba(30, 4, 44, 0.5);
    backdrop-filter: blur(14px);
  }
  .spotlight-gradient {
    position: absolute;
    left: -340px;
    top: -350px;
    right: auto;
    bottom: -110px;
    z-index: 0;
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    width: 800px;
    height: 800px;
    background-image: radial-gradient(
        circle farthest-corner at 50% 50%,
        rgba(255, 59, 0, 0.13),
        rgba(255, 255, 255, 0) 48%
      ),
      radial-gradient(
        circle farthest-corner at 50% 50%,
        rgba(255, 196, 0, 0.17),
        rgba(50, 132, 112, 0.12) 35%,
        rgba(20, 20, 20, 0) 67%,
        rgba(20, 20, 20, 0) 69%
      );
    opacity: 0.7;
  }

  /* VUE TYPER STYLES */
  .vue-typer .custom.char {
    /* Styles for each character
       e.g. color, background-color */
    color: #ff6917 !important;
  }

  /* .vue-typer .custom.char.typed { */
  /* Styles specific to typed characters
         i.e. characters to the left of the caret */
  /* } */
  /* .vue-typer .custom.char.selected { */
  /* Styles specific to selected characters
         i.e. characters to the right of the caret while VueTyper's
              'eraseStyle' is set to a selection-based style */
  /* } */
  .vue-typer .custom.char.erased {
    /* Styles specific to erased characters
         i.e. characters to the right of the caret while VueTyper's
              'eraseStyle' is set to a non-selection-based style */
    background-color: #fff;
  }
  .vue-typer .custom.caret {
    /* Styles for the caret
       e.g. background-color, animation, display */
    background-color: #fff;
  }
  /* .vue-typer .custom.caret.pre-type { */
  /* Styles for the caret when it is idle before typing
         i.e. before a string starts being typed, during 'preTypeDelay' */
  /* } */
  /* .vue-typer .custom.caret.pre-erase { */
  /* Styles for the caret when it is idle before erasing
         i.e. before a string starts being erased, during 'preEraseDelay' */
  /* } */
  /* .custom.caret.idle { */
  /* Styles for the caret when it is idle, but VueTyper has not yet completed typing
         i.e. when 'pre-type' or 'pre-erase' is set, but not 'complete' */
  /* } */
  /* .vue-typer .custom.caret.typing { */
  /* Styles for the caret while VueTyper is typing
         i.e. when the caret is moving forwards */
  /* } */
  /* .vue-typer .custom.caret.selecting { */
  /* Styles for the caret while VueTyper is selecting
         i.e. when the caret is moving backwards and 'eraseStyle' is
         set to a selection-based style */
  /* } */
  /* .vue-typer .custom.caret.erasing { */
  /* Styles for the caret while VueTyper is erasing
         i.e. when the caret is moving backwards and 'eraseStyle' is
         set to a non-selection-based style */
  /* } */
  /* .vue-typer .custom.caret.complete { */
  /* Styles for the idle caret when VueTyper has finished all typing/erasing */
  /* } */
}
